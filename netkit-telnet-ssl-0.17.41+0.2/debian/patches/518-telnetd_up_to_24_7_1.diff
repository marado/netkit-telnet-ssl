Description: Changes to telnet between 0.17.24+0.1-1 and -7.1.
 Alterations to the subdirectory `telnetd'.
 .
 Update CFLAGS and LIBS.  Do not strip `in.telnetd'.
 [telnetd/Makefile]
 .
 Fix compiler warnings.  Also netflush() returns `int' and writenet() is
 no longer defined as a macro.
 [telnetd/ext.h, telnetd/state.c, telnetd/telnetd.c, telnetd/utility.c]
 .
 When setting or unsetting the environment variable USER, then set or
 unset the internal variable `UserNameRequested' in the right way.
 [telnetd/state.c]
 .
 Fix '-z certsok': Add `ssl_certsok_flag' to the conditions that increase
 an empty `ssl_verify_flag' to be SSL_VERIFY_PEER (= 1).  Improve the text
 about the use of `/etc/ssl.users', which is related to `certsok'.
 [telnetd/telnetd.c, telnetd/telnetd.8]
 .
 Complete the TELOPT_ENVIRON exchange as first protocol step, even before
 announcing TELOPT_AUTHENTICATION.
 [telnetd/telnetd.c].
 .
 When `ssl_active_flag' is set, use SSL protected calls for reading and
 writing.  New helper function SSL_writev().
 [telnetd/utility.c (ttloop, netwritebuf)] 
 .
 Add printout text about '-z' for use when an invalid command line call
 is being parsed.
 [telnetd/telnetd.c].
 .
 Groff error.
 [telnetd/issue.net.5]

Author: Ian Beckwith, Christoph Martin, Herbert Xu
Comment: Computed from netkit-telnet-ssl_0.17.24+0.1-7.1.diff.
Bug-Debian: http://bugs.debian.org/36527
Forwarded: no
Last-Update: 2005-03-31

--- a/telnetd/ext.h
+++ b/telnetd/ext.h
@@ -31,7 +31,7 @@
  * SUCH DAMAGE.
  *
  *	from: @(#)ext.h	5.7 (Berkeley) 3/1/91
- *	$Id: ext.h,v 1.9 1999/12/12 14:59:44 dholland Exp $
+ *	$Id: ext.h,v 1.2 2004/11/21 12:53:12 ianb Exp $
  */
 
 /*
@@ -113,7 +113,7 @@
 void interrupt(void);
 void localstat(void);
 void netclear(void);
-void netflush(void);
+int netflush(void);
 size_t netbuflen(int);
 void sendurg(const char *, size_t);
 
@@ -183,7 +183,8 @@
 void tty_tspeed(int);
 void willoption(int);
 void wontoption(int);
-#define writenet(b, l) fwrite(b, 1, l, netfile)
+int writenet(char *, int);
+/*#define writenet(b, l) fwrite(b, 1, l, netfile)*/
 void netopen(void);
 
 #if defined(ENCRYPT)
--- a/telnetd/issue.net.5
+++ b/telnetd/issue.net.5
@@ -15,7 +15,7 @@
 .Pa /etc/issue.net
 is a text file which contains a message or system identification to be
 printed before the login prompt of a telnet session. It may contain
-various `%-char' sequences. The following sequences are supported by
+various `%\-char' sequences. The following sequences are supported by
 .Ic telnetd :
 .Bl -tag -offset indent -compact -width "abcde"
 .It %t
--- a/telnetd/state.c
+++ b/telnetd/state.c
@@ -35,11 +35,12 @@
  * From: @(#)state.c	5.10 (Berkeley) 3/22/91
  */
 char state_rcsid[] = 
-  "$Id: state.c,v 1.12 1999/12/12 19:41:44 dholland Exp $";
+  "$Id: state.c,v 1.4 2004/11/21 14:04:20 ianb Exp $";
 
 #include "telnetd.h"
 #if	defined(AUTHENTICATE)
 #include <libtelnet/auth.h>
+extern char *UserNameRequested;
 #endif
 
 int not42 = 1;
@@ -1161,7 +1162,7 @@
 
     case TELOPT_ENVIRON: {
 	register int c;
-	register char *cp, *varp, *valp;
+	register unsigned char *cp, *varp, *valp;
 
 	if (SB_EOF())
 		return;
@@ -1190,10 +1191,26 @@
 	    case ENV_VAR:
 		*cp = '\0';
 		if (envvarok(varp)) {
-		    if (valp)
-			(void)setenv(varp, valp, 1);
-		    else
-			unsetenv(varp);
+		  if (valp) {
+		    (void)setenv(varp, valp, 1);
+#ifdef AUTHENTICATE
+		    if (strcmp(varp,"USER") == 0) {
+		      if (UserNameRequested)
+			free(UserNameRequested);
+		      UserNameRequested=strdup(valp);
+		    }
+#endif /* AUTHENTICATE */
+		  }
+		  else {
+		    unsetenv(varp);
+#ifdef AUTHENTICATE
+		    if (strcmp(varp,"USER") == 0) {
+		      if (UserNameRequested)
+			free(UserNameRequested);
+		      UserNameRequested=NULL;
+		    }
+#endif /* AUTHENTICATE */
+		  }
 		}
 		cp = varp = (char *)subpointer;
 		valp = 0;
@@ -1212,10 +1229,26 @@
 	}
 	*cp = '\0';
 	if (envvarok(varp)) {
-	    if (valp)
-		(void)setenv(varp, valp, 1);
-	    else
-		unsetenv(varp);
+	  if (valp) {
+	    (void)setenv(varp, valp, 1);
+#ifdef AUTHENTICATE
+	    if (strcmp(varp,"USER") == 0) {
+	      if (UserNameRequested)
+		free(UserNameRequested);
+	      UserNameRequested=strdup(valp);
+	    }
+#endif /* AUTHENTICATE */
+	  }
+	  else {
+	    unsetenv(varp);
+#ifdef AUTHENTICATE
+	    if (strcmp(varp,"USER") == 0) {
+	      if (UserNameRequested)
+		free(UserNameRequested);
+	      UserNameRequested=NULL;
+	    }
+#endif /* AUTHENTICATE */
+	  }
 	}
 	break;
     }  /* end of case TELOPT_ENVIRON */
--- a/telnetd/telnetd.8
+++ b/telnetd/telnetd.8
@@ -30,7 +30,7 @@
 .\" SUCH DAMAGE.
 .\"
 .\"	from: @(#)telnetd.8	6.8 (Berkeley) 4/20/91
-.\"	$Id: telnetd.8,v 1.18 2000/07/30 23:57:10 dholland Exp $
+.\"	$Id: telnetd.8,v 1.4 2004/11/25 17:09:21 ianb Exp $
 .\"
 .Dd December 29, 1996
 .Dt TELNETD 8
@@ -222,12 +222,16 @@
 only accepts connections from SSL enhanced telnet with option 
 .Ic -z ssl
 .It Ic nossl, !ssl
-switch of SSL negotiation
+switch off SSL negotiation
 .It Ic certsok
 Look username up in /etc/ssl.users. The format of this file is lines
 of this form: 
 .Ar user1,user2:/C=US/.....
-where user1 and user2 are usernames. If client certificate is valid,
+where user1 and user2 are usernames and /C=US/... is the subject name of
+the certificate. Use 
+.Ar openssl x509 -subject -noout
+to extract the subject name.
+If client certificate is valid,
 authenticate without password.
 .It Ic certrequired
 client certificate is mandatory
@@ -454,7 +458,6 @@
 is compiled with support for data encryption, and
 indicates a willingness to decrypt
 the data stream.
-.Xr issue.net 5 ) .
 .El
 .Sh FILES
 .Pa /etc/services ,
--- a/telnetd/telnetd.c
+++ b/telnetd/telnetd.c
@@ -39,7 +39,7 @@
  * From: @(#)telnetd.c	5.48 (Berkeley) 3/1/91
  */
 char telnetd_rcsid[] = 
-  "$Id: telnetd.c,v 1.24 2000/04/12 21:36:12 dholland Exp $";
+  "$Id: telnetd.c,v 1.6 2004/12/21 18:14:29 ianb Exp $";
 
 #include "../version.h"
 
@@ -432,7 +432,7 @@
 
 #ifdef USE_SSL
 
-        if (ssl_secure_flag || ssl_cert_required) {
+        if (ssl_secure_flag || ssl_cert_required || ssl_certsok_flag) {
 	    /* in secure mode we *must* switch on the base level
 	     * verify checking otherwise we cannot abort connections
 	     * at the right place!
@@ -576,6 +576,11 @@
 #ifdef	AUTHENTICATE
 	fprintf(stderr, " [-X auth-type]");
 #endif
+#ifdef USE_SSL
+        /* might as well output something useful here ... */
+	fprintf(stderr, "\n\t [-z ssl] [-z secure] [-z debug] [-z verify=int]\n\t");
+	fprintf(stderr, " [-z cert=file] [-z key=file]\n\t");
+#endif /* USE_SSL */
 	fprintf(stderr, "\n");
 	exit(1);
 }
@@ -601,6 +606,18 @@
     /*
      * Handle the Authentication option before we do anything else.
      */
+    send_do(TELOPT_ENVIRON, 1);
+    while (his_will_wont_is_changing(TELOPT_ENVIRON)) {
+	ttloop();
+    }
+
+    if (his_state_is_will(TELOPT_ENVIRON)) {
+      netoprintf("%c%c%c%c%c%c", 
+		 IAC, SB, TELOPT_ENVIRON, TELQUAL_SEND, IAC, SE);
+	while (sequenceIs(environsubopt, baseline))
+	    ttloop();
+    }
+
     send_do(TELOPT_AUTHENTICATION, 1);
     while (his_will_wont_is_changing(TELOPT_AUTHENTICATION))
 	ttloop();
@@ -659,7 +676,6 @@
     send_do(TELOPT_TTYPE, 1);
     send_do(TELOPT_TSPEED, 1);
     send_do(TELOPT_XDISPLOC, 1);
-    send_do(TELOPT_ENVIRON, 1);
     while (
 #if	defined(ENCRYPT)
 	   his_do_dont_is_changing(TELOPT_ENCRYPT) ||
@@ -703,10 +719,6 @@
 	while (sequenceIs(xdisplocsubopt, baseline))
 	    ttloop();
     }
-    if (his_state_is_will(TELOPT_ENVIRON)) {
-	while (sequenceIs(environsubopt, baseline))
-	    ttloop();
-    }
     if (his_state_is_will(TELOPT_TTYPE)) {
 	char first[256], last[256];
 
@@ -857,7 +869,7 @@
 static void
 doit(struct sockaddr *who, socklen_t who_len)
 {
-	const char *host;
+	char *host;
 	int level;
 	char user_name[256];
 	int i;
--- a/telnetd/utility.c
+++ b/telnetd/utility.c
@@ -35,7 +35,7 @@
  * From: @(#)utility.c	5.8 (Berkeley) 3/22/91
  */
 char util_rcsid[] = 
-  "$Id: utility.c,v 1.11 1999/12/12 14:59:45 dholland Exp $";
+  "$Id: utility.c,v 1.3 2004/11/21 12:53:12 ianb Exp $";
 
 #define PRINTOPTIONS
 
@@ -86,6 +86,11 @@
     DIAG(TD_REPORT, netoprintf("td: ttloop\r\n"););
 		     
     netflush();
+#ifdef USE_SSL
+    if (ssl_active_flag)
+	ncc = SSL_read(ssl_con, netibuf, sizeof netibuf);
+    else
+#endif /* USE_SSL */
     ncc = read(net, netibuf, sizeof(netibuf));
     if (ncc < 0) {
 	syslog(LOG_INFO, "ttloop: read: %m\n");
@@ -243,6 +248,27 @@
 	doclear--;
 }  /* end of netclear */
 
+static int
+SSL_writev(SSL *ssl_con,const struct iovec *vector,int num)
+{
+	const struct iovec *v = vector;
+
+	int ret;
+	int len = 0;
+
+	while (num > 0) {
+		ret = SSL_write(ssl_con, v->iov_base, v->iov_len);
+		if (ret < 0)
+			return ret;
+		if (ret != v->iov_len)
+			syslog(LOG_NOTICE, "SSL_writev: short write\n");
+		num -= v->iov_len;
+		len += ret;
+		v++;
+	}
+	return len;
+}
+
 static void
 netwritebuf(void)
 {
@@ -268,6 +294,11 @@
 		if (lp == urg) {
 			len = v - vector;
 			if (!len) {
+#ifdef USE_SSL
+			        if (ssl_active_flag)
+				  n = SSL_write(ssl_con, lp->buf, 1);	
+				else
+#endif /* USE_SSL */
 				n = send(net, lp->buf, 1, MSG_OOB);
 				if (n > 0) {
 					urg = 0;
@@ -285,6 +316,11 @@
 	vector->iov_base = (char *)vector->iov_base + skip;
 	vector->iov_len -= skip;
 
+#ifdef USE_SSL
+	if (ssl_active_flag)
+	  n = SSL_writev(ssl_con, vector, len);	/* normal write */
+	else
+#endif /* USE_SSL */
 	n = writev(net, vector, len);
 
 epi:
@@ -326,14 +362,22 @@
  *             Send as much data as possible to the network,
  *     handling requests for urgent data.
  */
-void
+int
 netflush(void)
 {
 	if (fflush(netfile)) {
 		/* out of memory? */
 		cleanup(0);
+		return 0;
 	}
 	netwritebuf();
+	return 1;
+}
+
+int
+writenet(char *b , int l)
+{
+  return(fwrite(b, 1, l, netfile));
 }
 
 
